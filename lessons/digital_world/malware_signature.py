# lessons/malware/malware_signature.py

import binascii
import os
import time

# üé® Terminal Colors
RED = "\033[91m"
GREEN = "\033[92m"
YELLOW = "\033[93m"
BLUE = "\033[94m"
MAGENTA = "\033[95m"
CYAN = "\033[96m"
BOLD = "\033[1m"
RESET = "\033[0m"

def slow_print(text, delay=0.07):
    """Prints text slowly, simulating a typing effect."""
    for ch in text:
        print(ch, end='', flush=True)
        time.sleep(delay)
    print()

def intro():
    print(f"{BOLD}{MAGENTA}üö® Welcome to Malware Hex Signature Detection!{RESET}")
    slow_print(f"{CYAN}Malware often leaves a signature‚Äîunique patterns of bytes in a file‚Äîthat can be used to identify it. We‚Äôll explore how these hex signatures work.")
    slow_print(f"In this lesson, we‚Äôll see how to detect a malware file using its hex signature and compare it to known signatures.")
    input(f"\n{YELLOW}Press Enter to begin the lesson... {RESET}")

def read_file_in_hex(file_path):
    """Reads a file and returns its content in hexadecimal format."""
    try:
        with open(file_path, 'rb') as f:
            file_content = f.read()
            hex_content = binascii.hexlify(file_content).decode('utf-8')
            return hex_content
    except Exception as e:
        return f"{RED}Error reading file: {e}{RESET}"

def malware_signature_match(file_hex, signature):
    """Compares the file hex with a known malware signature."""
    if signature in file_hex:
        return True
    return False

def demo_malware_detection():
    print(f"\n{BOLD}{CYAN}üîç Demo: Detecting Malware with Hex Signatures{RESET}")
    slow_print(f"{CYAN}Let's simulate detecting malware by comparing a file's content (in hex) with a known malware signature.")
    
    # Known malware signature (for demo purposes, it‚Äôs a made-up signature)
    malware_signature = "e5f38d9a21c6d784"
    print(f"\n{YELLOW}Known Malware Signature: {RESET}{MAGENTA}{malware_signature}{RESET}")

    # Simulate reading a sample file in hex (this could be any file for demonstration)
    fake_file_path = "fake_malware_sample.bin"
    fake_file_hex = read_file_in_hex(fake_file_path)
    
    if "Error" in fake_file_hex:
        print(fake_file_hex)
        return
    
    # Check if the signature is present in the file's hex content
    if malware_signature_match(fake_file_hex, malware_signature):
        print(f"\n{GREEN}‚úÖ Malware Detected! The signature matches the known malware pattern.{RESET}")
    else:
        print(f"\n{RED}‚ùå No malware detected. The signature did not match.{RESET}")

def inspect_malware_hex():
    print(f"\n{BOLD}{CYAN}üîé Inspecting a Sample Malware File in Hex{RESET}")
    slow_print(f"{CYAN}Let‚Äôs take a look at a small section of a malware file's hex signature. This is a mock-up, but real-world malware often has identifiable hex patterns.")

    malware_sample_hex = "e5f38d9a21c6d784b2dbd9c7e35aa46d"
    print(f"\n{YELLOW}Malware Sample Hex (partial): {RESET}{MAGENTA}{malware_sample_hex}{RESET}")

    slow_print(f"\nAs you can see, this specific sequence of bytes is unique to a particular malware variant. Anti-virus software looks for these patterns when scanning files.")
    
def malware_signatures_list():
    print(f"\n{BOLD}{CYAN}üìú Common Malware Signatures{RESET}")
    slow_print(f"{CYAN}Let‚Äôs go over some well-known malware signatures (in hex) used to identify specific malicious software. These are just a few examples.")
    
    # Some known signature patterns (in reality, these would be more complex)
    malware_signatures = {
        "Ransomware A": "a3fbcde123d85f",
        "Trojan X": "7e9b28d8c9fcd2",
        "Virus Y": "ab58e6785c213d",
        "Spyware Z": "e9b734dd12a8b9"
    }

    for name, signature in malware_signatures.items():
        print(f"{YELLOW}{name}: {RESET}{MAGENTA}{signature}{RESET}")
        slow_print(f"\nThese byte patterns are unique to their respective malware. Security systems use these signatures to flag files with matching patterns.", delay=0.05)

def quiz():
    print(f"\n{BOLD}{MAGENTA}üéÆ Malware Signature Quiz Time!{RESET}")
    print(f"\n{CYAN}Question: How do antivirus programs detect malware?{RESET}")
    print(f"{YELLOW}A) By scanning the file for known hex signatures.{RESET}")
    print(f"{YELLOW}B) By looking for a specific file name.{RESET}")
    print(f"{YELLOW}C) By checking the size of the file.{RESET}")

    answer = input(f"{CYAN}Your Answer (A, B, or C): {RESET}").strip().upper()

    if answer == "A":
        print(f"{GREEN}‚úÖ Correct! Antivirus programs scan for known malware signatures in files to detect malicious software.{RESET}")
    else:
        print(f"{RED}‚ùå Nope! The correct answer is A. Malware detection is often based on hex signatures found in files.{RESET}")

def summary():
    print(f"\n{BOLD}{BLUE}üìò Summary:{RESET}")
    slow_print(f"{CYAN}‚úî Malware can be identified by unique hex signatures‚Äîspecific byte patterns that are present in malicious files.")
    slow_print(f"‚úî Antivirus software compares file content against a database of known hex signatures to detect malware.")
    slow_print(f"‚úî By examining a file‚Äôs raw content in hexadecimal format, you can uncover these malware signatures.")
    print(f"{GREEN}You‚Äôve learned how malware is detected using hex signatures and how to analyze files for malicious patterns! üéâ{RESET}")
    input(f"\n{BOLD}‚û°Ô∏è Press Enter to go back to the lesson list...{RESET}")

def run():
    intro()
    demo_malware_detection()
    inspect_malware_hex()
    malware_signatures_list()
    quiz()
    summary()

if __name__ == "__main__":
    run()
