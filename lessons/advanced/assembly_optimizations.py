import time

# ANSI color codes
CYAN = "\033[96m"
GREEN = "\033[92m"
YELLOW = "\033[93m"
MAGENTA = "\033[95m"
RED = "\033[91m"
BOLD = "\033[1m"
RESET = "\033[0m"

def slow_print(text, delay=0.07):
    for char in text:
        print(char, end='', flush=True)
        time.sleep(delay)
    print()

def run():
    print(f"\n{BOLD}üöÄ Optimizing Assembly Code for Speed (x86-64){RESET}\n")
    time.sleep(1)

    # Introduction
    slow_print(f"{YELLOW}üéØ Assembly gives you full control of performance-critical code ‚Äî but with great power comes great responsibility!{RESET}")
    slow_print(f"{CYAN}This lesson explores ways to write faster, leaner, and smarter x86-64 instructions.{RESET}")
    time.sleep(1)

    # Key Concepts
    slow_print(f"\n{BOLD}üß† Key Concepts in Performance:{RESET}")
    concepts = [
        "‚Ä¢ Instruction throughput (how many per cycle)",
        "‚Ä¢ Instruction latency (how long it takes)",
        "‚Ä¢ Pipelines and stalls",
        "‚Ä¢ Cache locality and memory access",
        "‚Ä¢ Branch prediction and speculation"
    ]
    for c in concepts:
        slow_print(f"{MAGENTA}{c}{RESET}")
        time.sleep(0.4)

    # Tip 1: Avoid slow instructions
    slow_print(f"\n{BOLD}‚ö†Ô∏è Tip 1: Avoid Slow Instructions{RESET}")
    slow_ops = [
        "‚Ä¢ div / idiv    ‚Äì Division is slow (use shifts if possible)",
        "‚Ä¢ mul           ‚Äì Slower than add/sub",
        "‚Ä¢ imul          ‚Äì Better than mul, but still costly",
        "‚Ä¢ jmp + bad branches ‚Äì Kills pipeline if mispredicted"
    ]
    for s in slow_ops:
        slow_print(f"{RED}{s}{RESET}")
        time.sleep(0.3)

    # Tip 2: Strength Reduction
    slow_print(f"\n{BOLD}üí° Tip 2: Use Strength Reduction (Cheaper Operations){RESET}")
    examples = [
        "‚úò imul rax, 10      ‚Üí  takes multiple cycles",
        "‚úî lea rax, [rax*8 + rax*2]   ‚Üí  much faster!",
        "‚úò div rbx           ‚Üí  slow",
        "‚úî shift or mask when dividing by powers of 2"
    ]
    for ex in examples:
        slow_print(f"{CYAN}{ex}{RESET}")
        time.sleep(0.4)

    # Tip 3: Minimize memory access
    slow_print(f"\n{BOLD}üß† Tip 3: Minimize Memory Accesses{RESET}")
    slow_print(f"{YELLOW}Registers are much faster than RAM. Load data once, use it many times.{RESET}")
    slow_print(f"{GREEN}‚úî Cache-friendly access (linear, small steps) beats random access.{RESET}")
    time.sleep(1)

    # Tip 4: Unroll loops
    slow_print(f"\n{BOLD}üîÅ Tip 4: Unroll Loops to Reduce Branching Overhead{RESET}")
    slow_print(f"{MAGENTA}Example:{RESET}")
    slow_print(f"{CYAN}Instead of looping 4 times, write the body 4x and eliminate the loop entirely ‚Äî at the cost of more code.{RESET}")
    time.sleep(1)

    # Tip 5: Use LEA smartly
    slow_print(f"\n{BOLD}üõ†Ô∏è Tip 5: Master the LEA Instruction{RESET}")
    slow_print(f"{GREEN}LEA (Load Effective Address) can perform addition, multiplication, and more ‚Äî without affecting flags.{RESET}")
    slow_print(f"{CYAN}Great for computing addresses or quick math (e.g., rax = rbx*5 + rcx){RESET}")
    time.sleep(1)

    # Micro-optimizations
    slow_print(f"\n{BOLD}‚öôÔ∏è Micro-Optimization Tricks:{RESET}")
    tricks = [
        "‚Ä¢ Align code to 16-byte boundaries for better fetch",
        "‚Ä¢ Use fewer jumps and conditional branches",
        "‚Ä¢ Prefer short, pipelinable instruction sequences",
        "‚Ä¢ Keep hot loops small enough to fit in L1 cache"
    ]
    for t in tricks:
        slow_print(f"{MAGENTA}{t}{RESET}")
        time.sleep(0.3)

    # Benchmarking
    slow_print(f"\n{BOLD}üìè Always Measure!{RESET}")
    slow_print(f"{CYAN}Use tools like `perf`, `rdtsc`, or `hyperfine` to benchmark your changes ‚Äî don‚Äôt rely on guesswork!{RESET}")
    time.sleep(1)

    # Summary
    slow_print(f"\n{BOLD}üìå Summary:{RESET}")
    summary = [
        "‚úî Avoid slow operations like `div` when possible",
        "‚úî Replace expensive ops with cheap ones (LEA, shifts)",
        "‚úî Minimize memory accesses and favor registers",
        "‚úî Write small, predictable loops with few branches",
        "‚úî Profile and benchmark to validate improvements"
    ]
    for line in summary:
        slow_print(f"{GREEN}{line}{RESET}")
        time.sleep(0.3)

    # Challenge
    slow_print(f"\n{BOLD}{CYAN}üéØ Challenge: Write two versions of a function that computes a √ó 5. One using `imul`, one using `lea`. Compare performance using `rdtsc`!{RESET}")
    time.sleep(1)

    print(f"\n{BOLD}üìö Lesson complete! Would you like to explore how to use `perf stat` or CPU pipelines next?{RESET}")
    input(f"\n{BOLD}‚û°Ô∏è Press Enter to go back to the lesson list...{RESET}")
